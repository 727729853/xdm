private void SetMenuToDarkMode(ContextMenuStrip ctx, Color bg, Color fg)
        {
            foreach (ToolStripItem item in ctx.Items)
            {
                item.BackColor = bg;
                item.ForeColor = fg;
            }
        }

        private void DarkModeDataGridView(DataGridView dataGridView, Color bg1, Color fg1)
        {
            var dgvType = dataGridView.GetType();
            var vs = dgvType.GetProperty("VerticalScrollBar",
                  BindingFlags.Instance | BindingFlags.NonPublic);
            var vScroll = vs.GetValue(dataGridView) as VScrollBar;
            vScroll.HandleCreated += (a, b) =>
            {
                //https://stackoverflow.com/questions/53501268/win10-dark-theme-how-to-use-in-winapi
                SetWindowTheme(vScroll.Handle, "DarkMode_Explorer", null);
            };

            var hs = dgvType.GetProperty("VerticalScrollBar",
                  BindingFlags.Instance | BindingFlags.NonPublic);
            var hScroll = vs.GetValue(dataGridView) as VScrollBar;
            vScroll.HandleCreated += (a, b) =>
            {
                //https://stackoverflow.com/questions/53501268/win10-dark-theme-how-to-use-in-winapi
                SetWindowTheme(hScroll.Handle, "DarkMode_Explorer", null);
            };

            dataGridView.BackgroundColor = bg1;
            dataGridView.GridColor = bg1;
            dataGridView.DefaultCellStyle.BackColor = bg1;
            dataGridView.DefaultCellStyle.ForeColor = fg1;
            dataGridView.DefaultCellStyle.SelectionForeColor = Color.Gray;
            dataGridView.DefaultCellStyle.SelectionBackColor = Color.FromArgb(60, 60, 60);
            dataGridView.ColumnHeadersDefaultCellStyle.BackColor = bg1;
            dataGridView.ColumnHeadersDefaultCellStyle.ForeColor = fg1;
            dataGridView.ColumnHeadersDefaultCellStyle.SelectionForeColor = Color.Gray;
            dataGridView.ColumnHeadersDefaultCellStyle.SelectionBackColor = bg1;
        }

        private void EnableDarkStyles()
        {
            var bg1 = Color.FromArgb(15, 15, 15);
            var fg1 = Color.Gray;

            var bg2 = Color.FromArgb(35, 35, 35);
            var fg2 = Color.Gray;

            DarkModeDataGridView(dgActiveList, bg1, fg1);
            DarkModeDataGridView(dgCompletedList, bg1, fg1);

            DarkModeDataGridView(dgState, bg2, fg2);
            DarkModeDataGridView(dgCategories, bg2, fg2);

            tableLayoutPanel1.BackColor = bg1;

            panel1.BackColor = panel3.BackColor = panel2.BackColor = bg2;

            this.HandleCreated += (a, b) =>
            {
                UseImmersiveDarkMode(this.Handle, true);
            };

            panel9.BackColor = tableLayoutPanel3.BackColor = textBox1.BackColor = bg2;

            textBox1.ForeColor = Color.DimGray;

            ctxDownloadMenu.BackColor = ctxMenuActiveList.BackColor =
                ctxMenuCompletedList.BackColor =
                ctxMainMenu.BackColor = bg1;
            SetMenuToDarkMode(ctxDownloadMenu, bg1, fg1);
            SetMenuToDarkMode(ctxMenuActiveList, bg1, fg1);
            SetMenuToDarkMode(ctxMenuCompletedList, bg1, fg1);
            SetMenuToDarkMode(ctxMainMenu, bg1, fg1);
        }


        [DllImport("uxtheme.dll", SetLastError = true, CharSet = CharSet.Unicode, EntryPoint = "#133")]
        public static extern int AllowDarkModeForWindow(IntPtr hWnd, int allow);

        [DllImport("uxtheme.dll", SetLastError = true, ExactSpelling = true, CharSet = CharSet.Unicode)]
        public static extern int SetWindowTheme(IntPtr hWnd, string pszSubAppName, string pszSubIdList);

        [DllImport("dwmapi.dll")]
        private static extern int DwmSetWindowAttribute(IntPtr hwnd, int attr, ref int attrValue, int attrSize);

        private const int DWMWA_USE_IMMERSIVE_DARK_MODE_BEFORE_20H1 = 19;
        private const int DWMWA_USE_IMMERSIVE_DARK_MODE = 20;

        private static bool UseImmersiveDarkMode(IntPtr handle, bool enabled)
        {
            if (IsWindows10OrGreater(17763))
            {
                var attribute = DWMWA_USE_IMMERSIVE_DARK_MODE_BEFORE_20H1;
                if (IsWindows10OrGreater(18985))
                {
                    attribute = DWMWA_USE_IMMERSIVE_DARK_MODE;
                }

                int useImmersiveDarkMode = enabled ? 1 : 0;
                return DwmSetWindowAttribute(handle, (int)attribute, ref useImmersiveDarkMode, sizeof(int)) == 0;
            }

            return false;
        }

        private static bool IsWindows10OrGreater(int build = -1)
        {
            return Environment.OSVersion.Version.Major >= 10 && Environment.OSVersion.Version.Build >= build;
        }