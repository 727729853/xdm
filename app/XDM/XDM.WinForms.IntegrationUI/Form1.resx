<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIAASEwAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAAEtlJ
        REFUeNrt3VlzFOd+x/Hf8/RoBcwhcTmVynbjqlSSm1ykUslFqlJ5DbnIVS7yXg4CL4ccH/v4OBDHdnzs
        clw+B4nNgA2YTYWtQRZoFxISEpLQNpp9ens6F90aDbIAIWmmZ+b/+1QhsNHyoNHz7e5nprvV3/1mIgAR
        iaTjHgARxYcBIBKMASASjAEgEowBIBKMASASjAEgEowBIBKMASASjAEgEowBIBKMASASjAEgEowBIBKM
        ASASjAEgEowBIBKMASASjAEgEowBIBKMASASjAEgEowBIBKMASASjAEgEowBIBKMASASjAEgEowBIBKM
        ASASjAEgEowBIBKMASASjAEgEowBIBKMASASjAEgEowBIBKMASASjAEgEowBIBKMASASjAEgEowBIBKM
        ASASjAEgEowBIBKMASASjAEgEowBIBKMASASjAEgEowBIBIsEfcApAriHkCdUXEPQCgGICZtlkJC88ce
        ADwTwPGZxDgwADH59789gn/6805I/7m3FHDjUQGnkmtxD0UkBiAGCsCfvdKCv36tPe6h1IXpdRcKPCyK
        AxcBiQRjAIgEYwCIBGMAiARjAIgEYwCIBGMAiARjAIgEYwCIBGMAiARjAIgEYwCIBGMAiARjAIgEYwCI
        BGMAiARjAIgEYwCIBGMAiARjAIgEYwCIBGMAiARjAIgEYwCIBGMAiARjAIgEYwCIBGMAiARjAIgEYwCI
        BGMAiARjAIgEYwCIBNPGtaM/qrjHQkQ1Ec5149pI5GZH0HLwCFpfeRVWeyegNBAEcY+QiPabUkBg4Jfy
        cDIrcHMpJIxbgr02DyezgpYDPwtD0HEQykowBETNQCkEvge/lIOTXoGbX0fgOYBSSGy+gwsnvQQ3twqr
        4xBaD72KxIHD0IlWhLsMjAFR4wjnrPEcePk0nOwK/GIWge+HewIqPAxIPP0xCoEx8HLr8PIZWG0daDl4
        BC0H/wBWWyegeXhAVNeUAoyBb+fh5tbg5lLw7SIQmKcm/obEMz8JAvh2Hn4pD3t9CYnOQ2g99IdIdL4C
        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
        +vobz8FXW/hahPB+Btz4Nz4GoAlopbC4XkBXdxJTS5mqfZ2ppQy6epJYWC9w179JMABNwtIKg3NrOH7m
        LlJ5e98/fyofno8wOLvGRb8mwgA0EUsrXBmaw3uX78P29u8aAhtnJF4ZmuPkbzIMQJMJAuDz2+P4ovfB
        vlyAMwiA/+t9gM9vj/OCnk2IAWgySgEl18e7l+7h2sjeryFwbeQxfnXpHkquz0W/JsQANCGtFFazJRzr
        SWJ0PrXrzzM6n8KxM0msZnluf7NiAJqU1goTi+E1BJYyxZf++KVMeGXiiYU0z+1vYgxAE7O0wq2Ka/Lv
        1Ma9CW6NLXDRr8kxAM1OqfJdecwOVvFMEOB/b47hd99Pggf9zY8BaHLhNQQ278v3IhfvPcJvovsTcvo3
        PwZAAKUU0gUHb54J78z7LAOPVvBmdIdiXtlHBgZACK0UpleyONqTxONU/id/P5/Ko6s7ienlLFf8BWEA
        BLG0Qt/UEt4+149cyS3//1zJxVvnfsQPU0tc9BOGARBGK4Vz/TM4dXUYvgngmwCnrg3jXP80t/wCJeIe
        ANWebwJ8+N0I/uLVQ4AC/udaeJVhzn95GACBNq4hcLQnCQDI2S63/kIxAEJt3HJs488kEwMgGOc9cRGQ
        SDAGgEgwBoBIMAaASDAGgEgwBoBIMAaASDAGgEgwBoBIMAaASDAGgEgwBoBIMAaASDAGgEgwBoBIMAaA
        SDAGgEgwBoBIMAaASDAGgEgwBoBIMAaASDAGgEgwBoBIMAaASDAGgEgwBoBIMAaASDAGgEgwBoBIMAaA
        SDAGgEgwBoBIMAaASDAGgEgwBoBIMAaASDAGgEgwBoBIMAaASDAGgEgwBoBIMAaASDAGgEgwBoBIMAaA
        SDAGgEgwBoBIMAaASDAGgEgwBoBIsP8Hy8RB2CRpf9YAAAAASUVORK5CYII=
</value>
  </data>
</root>